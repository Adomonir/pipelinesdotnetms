# Build ASP.NET Core project using Azure Pipelines
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core?view=vsts

pool:
  vmImage: 'ubuntu-16.04' # other options: 'macOS-10.13', 'vs2017-win2016'


  
variables:
  buildConfiguration: 'Release'

steps:
- script: |
    dotnet build --configuration $(buildConfiguration) # Include additional options such as --configuration to meet your need
    dotnet test dotnetcore-tests --configuration $(buildConfiguration) --logger trx
    
    # Publishing the output of the build
    dotnet publish --configuration $(buildConfiguration) --output $BUILD_ARTIFACTSTAGINGDIRECTORY
    # You can run any dotnet command in your pipeline. The following example shows how to install and use a .NET global tool, dotnetsay:
    # https://www.nuget.org/packages/dotnetsay/
    # dotnet tool install -g dotnetsay
    # dotnetsay
    # Above in reference with dotnetsay command this is the original way about install it. But there is this bug
    # https://developercommunity.visualstudio.com/content/problem/340067/install-global-tool.html?childToView=343864#comment-343864
    # which was soleved with this comment issue https://github.com/dotnet/cli/issues/8368#issuecomment-424852996

    dotnet tool install  --tool-path . dotnetsay
    ./dotnetsay
  displayName: 'Command Line Script'    

# .NET Core
# Restore NuGet packages.
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    #verbosityRestore: 'detailed' # Options: quiet, minimal, normal, detailed, diagnostic

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishBuildArtifacts@1

# Use the .NET Core task to run unit tests in your .NET Core solution by using testing frameworks like MSTest, xUnit, and NUnit. 
# THere is a warning # #[warning]Project file(s) matching the specified pattern were not found. 
# https://stackoverflow.com/a/53053739/2773461 I should check it in depth.
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# Running dotnet tests
- script: dotnet test dotnetcore-sample.sln --logger trx
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

# Collect code coverage
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=vsts&tabs=yaml#collect-code-coverage
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'


# If you choose to run the dotnet test command, 
# specify the test results logger and coverage options. Then use the Publish Test Results task:
- script: dotnet test dotnetcore-sample.sln --logger trx --collect "Code coverage"
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

# Package and deliver the code 
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=vsts&tabs=yaml#package-and-deliver-your-code
# This code takes all the files in $(Build.ArtifactStagingDirectory) and upload them as 
# an artifact of your build. 
- task: PublishBuildArtifacts@1

# Publish to a NuGet feed
# To create and publish a NuGet package, add the following snippet:
- script: dotnet pack /p:PackageVersion=$(version)  # define version variable elsewhere in your pipeline


# I have to get the creentials
# - task: NuGetCommand@2
#  inputs:
    #command: push
    #nuGetFeedType: external
    #publishFeedCredentials: 'pipelines-dotnet-core'
    #versioningScheme: byEnvVar
    #versionEnvVar: version